#!/usr/bin/env python -t
"""Tron Control

Part of the command line interface to the tron daemon. Provides the interface to controlling jobs and runs.
"""
import sys
import os.path
import urllib2
import urlparse
import simplejson
import optparse

import yaml

from tron import cmd

def parse_options():
    parser = optparse.OptionParser("usage: %prog [-v] [--server=<servername>] <command> <object>")
    parser.add_option("--server", action="store", dest="server", help="Server URL to connect to")
    parser.add_option("--verbose", "-v", action="count", dest="verbose", help="Verbose logging", default=0)

    (options, args) = parser.parse_args(sys.argv)

    if len(args) != 3:
        parser.error("Missing command")

    return options, args[1:]

def queue_job(options, job_name):
    data = {'action': 'queue'}
    status, content = cmd.request(options, "/jobs/%s" % (job_name,), data=data)

    if status == cmd.OK:
        print "Job Queued as run: %s" % content['id']
    else:
        print >>sys.stderr, "Unexpected response from queue_job operation: %r" % ((status, content),)

def start_run(options, run_id):
    data = {'action': 'start'}
    status, content = cmd.request(options, "/runs/%s" % (run_id,), data=data)

    if status == cmd.OK:
        if content['state'] == "RUNN":
            print "Job Run %s now running" % content['id']
        else:
            print "Job Run %s now in state %s" % (content['id'], content['state'])
    else:
        print >>sys.stderr, "Unexpected response from run start operation: %r" % ((status, content),)

def cancel(options, run_id):
    data = {'action': 'cancel'}
    status, content = cmd.request(options, "/runs/%s" % (run_id,), data=data)

    if status == cmd.OK:
        if content['state'] == "CANC":
            print "Job Run %s now cancelled" % content['id']
        else:
            print "Job Run %s now in state %s" % (content['id'], content['state'])
    else:
        print >>sys.stderr, "Unexpected response from run start operation: %r" % ((status, content),)

def succeed(options, run_id):
    data = {'action': 'succeed'}
    status, content = cmd.request(options, "/runs/%s" % (run_id,), data=data)

    if status == cmd.OK:
        if content['state'] == "SUCC":
            print "Job Run %s is now marked succeeded" % content['id']
        else:
            print "Job Run %s now in state %s" % (content['id'], content['state'])
    else:
        print >>sys.stderr, "Unexpected response from run start operation: %r" % ((status, content),)

def fail(options, run_id):
    data = {'action': 'fail'}
    status, content = cmd.request(options, "/runs/%s" % (run_id,), data=data)

    if status == cmd.OK:
        if content['state'] == "F":
            print "Job Run %s is now marked failed" % content['id']
        else:
            print "Job Run %s now in state %s" % (content['id'], content['state'])
    else:
        print >>sys.stderr, "Unexpected response from run start operation: %r" % ((status, content),)

def main():
    """run tronctl"""
    options, args = parse_options()
    
    cmd.load_config(options)

    if options.server is None:
        print >>sys.stderr, "Server not specified"
        sys.exit(1)

    status, content = cmd.request(options, "/")
    if status != cmd.OK or not content or not content['status']:
        print >>sys.stderr, "Error connecting to tron server at %s" % options.server
        sys.exit(1)

    command = args[0]
    if command == "start":
        start_run(options, args[1])
    elif command in ("schedule", "sched"):
        queue_job(options, args[1])
    elif command in ("succeed", "mark_succeeded"):
        succeed(options, args[1])
    elif command in ("fail", "marked_failed"):
        fail(options, args[1]) 
    elif command in ("cancel"):
        cancel(options, args[1])    
    
    cmd.save_config(options)

if __name__ == '__main__':
    main()
