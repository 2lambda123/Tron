#!/usr/bin/env python -t
import sys
import optparse

from tron import cmd

LOCAL = "http://localhost:8082"

JOB_COLUMNS = (
    ('Name', 20,),
    ('Scheduler', 20,),
    ("Last Success", 28,),
)

JOB_RUN_COLUMNS = (
    ('Job Run ID', 30),
    ('State', 6),
    ('Scheduled Time', 23), 
    ('Start Time', 23),
    ('End Time', 23),
)

ACTION_RUN_COLUMNS = (
    ('Action Run ID', 40),
    ('State', 6),
    ('Scheduled Time', 23),
    ('Start Time', 23),
    ('End Time', 23),
)

def parse_options():
    parser = optparse.OptionParser()
    parser.add_option("--server", action="store", dest="server", help="Server URL to connect to", default=LOCAL)
    parser.add_option("--verbose", "-v", action="count", dest="verbose", help="Verbose logging", default=0)
    parser.add_option("--numshown", "-n", type="int", dest="num_shown", help="Max number of jobs shown", default=20)

    (options, args) = parser.parse_args(sys.argv)

    return options, args[1:]

def view_all(options):
    """docstring for view_jobs"""

    status, content = cmd.request(options, "/jobs")
    assert status == cmd.OK
    assert 'jobs' in content
    
    if len(content['jobs']) == 0:
        print "No jobs"
    else:
        # Print a header
        print "Connected to tron server %s" % options.server
        print
        print " ".join((name.ljust(size) for name, size in JOB_COLUMNS))

        # Show job data
        for job in content['jobs']:
            print " ".join(str(val).ljust(size) for val, (_, size) in zip((job['name'], job['scheduler'], job['last_success']), JOB_COLUMNS))

def view_job(options, job_name):
    """Retrieve details of the specified job and display"""
    status, job_content = cmd.request(options, "/jobs/%s" % job_name)
    if status == cmd.ERROR:
        print >>sys.stderr, "%s: Cannot find job %s" % (job_content, job_name)
        sys.exit(1)

    print "Job: %s" % job_content['name']
    print "Scheduler: %s\n" % job_content['scheduler']
    
    print "List of Actions (topological):"
    print "\n".join(job_content['action_names'])
    print 
    print "Node Pool:"
    print "\n".join(job_content['node_pool'])
    print
    print "Run History: (%d total)" % len(job_content['runs'])
    print " ".join(title.ljust(size) for title, size in JOB_RUN_COLUMNS)

    if not options.num_shown:
        options.num_shown = len(job_content['runs'])

    for run in job_content['runs'][:options.num_shown]:
        run_id = run['id']
        run_state = run['state']

        if run['run_time'] is None:
            run_time = "-"
        else:
            run_time = run['run_time'][:-7]

        if run['start_time'] is None:
            start_time = "-"
        else:
            start_time = run['start_time'][:-7]

        if run['end_time'] is None:
            end_time = "-"
        else:
            end_time = run['end_time'][:-7]

        print " ".join(str(val).ljust(size) for val, (_, size) in zip((run_id, run_state, run_time, start_time, end_time), JOB_RUN_COLUMNS))

def view_job_run(options, job_run_id):
    status, job_run_content = cmd.request(options, "/jobs/%s" % job_run_id.replace('.', '/'))
    if status == cmd.ERROR:
        print >>sys.stderr, "%s: Cannot find job run %s" % (job_run_content, job_run_id)
        sys.exit(1)
   
    print "Job Run: %s" % job_run_content['id']
    print "State: %s" % job_run_content['state']
    print "Node: %s" % job_run_content['node']
    print
    print " ".join(title.ljust(size) for title, size in ACTION_RUN_COLUMNS)
    
    for run in job_run_content['runs']:
        run_id = run['id']
        run_state = run['state']

        if run['run_time'] is None:
            run_time = "-"
        else:
            run_time = run['run_time'][:-7]

        if run['start_time'] is None:
            start_time = "-"
        else:
            start_time = run['start_time'][:-7]

        if run['end_time'] is None:
            end_time = "-"
        else:
            end_time = run['end_time'][:-7]

        print " ".join(str(val).ljust(size) for val, (_, size) in zip((run_id, run_state, run_time, start_time, end_time), ACTION_RUN_COLUMNS))

def view_action_run(options, act_run_id):
    url = "/jobs/%s?num_lines=%s" % (act_run_id.replace('.', '/'), options.num_shown)
    status, act_run_content = cmd.request(options, url)

    if status == cmd.ERROR:
        print >>sys.stderr, "%s: Cannot find action run %s" % (act_run_content, act_run_id)
        sys.exit(1)
    
    print "Action Run: %s" % act_run_content['id']
    print "State: %s" % act_run_content['state']
    print "Node: %s" % act_run_content['node']
    print
    print "Requirements:"
    for req in act_run_content['requirements']:
        print req
    print
    print "Output:"
    print "".join(act_run_content['output'])

def main():
    """run tronview"""
    options, args = parse_options()
    
    cmd.load_config(options)

    if options.server is None:
        print >>sys.stderr, "Server not specified"
        sys.exit(1)

    status, content = cmd.request(options, "/")
    if status != cmd.OK or not content or not content['status']:
        print >>sys.stderr, "Error connecting to tron server at %s" % options.server
        sys.exit(1)

    if not args:
        view_all(options, )
    else:
        level = args[0].count('.')
        if level == 0:
            view_job(options, args[0])
        elif level == 1:
            view_job_run(options, args[0])
        else:
            view_action_run(options, args[0])

    cmd.save_config(options)

if __name__ == '__main__':
    main()
