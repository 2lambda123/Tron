#!/usr/bin/env python -t
import sys
import optparse

from tron import cmd

TROND_SERVICE = "http://localhost:8082"

JOBS_COLUMNS = (
    ('Name', 20,),
    ('Scheduler', 20,),
    ("Node", 25,),
    ("Last Success", 28,),
    ("Status", 10,),
)

RUNS_COLUMNS = (
    ('ID', 36),
    ('State', 6),
    ('Start Time', 23),
    ('End Time', 23),
)

def parse_options():
    parser = optparse.OptionParser()
    parser.add_option("--server", action="store", dest="server", help="Server URL to connect to")
    parser.add_option("--verbose", "-v", action="count", dest="verbose", help="Verbose logging", default=0)

    (options, args) = parser.parse_args(sys.argv)


    return options, args[1:]

def view_jobs(options):
    """docstring for view_jobs"""

    status, content = cmd.request(options, "/jobs")
    assert status == cmd.OK
    assert 'jobs' in content
    
    if len(content['jobs']) == 0:
        print "No jobs"
    else:
        # Print a header
        print "Connected to tron server %s" % options.server
        print
        print " ".join((name.ljust(size) for name, size in JOBS_COLUMNS))

        # Show job data
        for job in content['jobs']:
            print " ".join(val.ljust(size) for val, (_, size) in zip((job['name'], job['scheduler'], job['node'], job['last_success'], job['status']), JOBS_COLUMNS))

def view_job(options, job_name):
    """Retrieve details of the specified job and display"""
    stauts, job_content = cmd.request(options, "/jobs/%s" % job_name)
    
    print "Job: %s" % job_content['name']
    print "Node: %s" % job_content['node']
    print "Scheduler: %s" % job_content['scheduler']
    print
    print "Run History: (%d total)" % len(job_content['runs'])
    print "\t" + " ".join(title.ljust(size) for title, size in RUNS_COLUMNS)
    for run in reversed(job_content['runs'][:20]):
        run_id = run['id']
        run_state = run['state']

        if run['exit_status'] is None:
            run_exit = "-"
        else:
            run_exit = run['exit_status']
        
        if run['start_time'] is None:
            run_start = "-"
        else:
            run_start = run['start_time'][:-7]

        if run['end_time'] is None:
            run_end = "-"
        else:
            run_end = run['end_time'][:-7]

            
        print "\t" + " ".join(str(val).ljust(size) for val, (_, size) in zip((run_id, run_state, run_start, run_end), RUNS_COLUMNS))

def main():
    """run tronview"""
    options, args = parse_options()
    
    cmd.load_config(options)

    if options.server is None:
        print >>sys.stderr, "Server not specified"
        sys.exit(1)

    status, content = cmd.request(options, "/")
    if status != cmd.OK or not content or not content['status']:
        print >>sys.stderr, "Error connecting to tron server at %s" % options.server
        sys.exit(1)

    if args:
        view_job(options, args[0])
    else:
        view_jobs(options, )

    cmd.save_config(options)

if __name__ == '__main__':
    main()