#!/usr/bin/env python
import sys
import optparse

from tron import cmd

JOB_COLUMNS = (
    ('Name', 30,),
	('State', 10),
    ('Scheduler', 20,),
    ("Last Success", 20,),
)

SERVICE_COLUMNS = (
    ('Name', 30,),
	('State', 10),
    ('Instance Count', 10,),
)


RUN_COLUMNS = (
    ('Run ID', 8),
    ('State', 6),
    ('Node', 20),
    ('Scheduled Time', 20),
)

ACTION_RUN_COLUMNS = (
    ('Action ID', 20),
    ('State', 6),
    ('Start Time', 20),
    ('End Time', 20),
    ('Duration', 10),
)


def parse_options():
    parser = optparse.OptionParser("usage: %prog [options] [<job | job run | action>]")
    parser.add_option("--server", action="store", dest="server", help="Server URL to connect to", default=None)
    parser.add_option("--verbose", "-v", action="count", dest="verbose", help="Verbose logging", default=0)
    parser.add_option("--numshown", "-n", type="int", dest="num_shown", help="Max number of jobs shown", default=20)
    parser.add_option("--stdout", "-o", action="count", dest="stdout", help="Solely displays stdout", default=0)
    parser.add_option("--stderr", "-e", action="count", dest="stderr", help="Solely displays stderr", default=0)

    (options, args) = parser.parse_args(sys.argv)

    return options, args[1:]

def trunc(value, length):
    if len(value) > length:
        return value[:length-3] + '...'
    return value

def view_all(options):
    """docstring for view_jobs"""

    status, content = cmd.request(options.server, "/")
    assert status == cmd.OK
    print "Services:"
    if len(content.get('services', [])) == 0:
        print "No services"
    else:
        print " ".join((name.ljust(size) for name, size in SERVICE_COLUMNS))

        # Show service data
        for service in sorted(content['services'], key=lambda s: s['name']):

            print " ".join(trunc(str(val), size).ljust(size) for val, (_, size) in zip((service['name'], service['status'], service['count']), SERVICE_COLUMNS))



    status, content = cmd.request(options.server, "/jobs")
    assert status == cmd.OK

    print
    print "Jobs:"
    if len(content['jobs']) == 0:
        print "No jobs"
    else:
        print " ".join((name.ljust(size) for name, size in JOB_COLUMNS))

        # Show job data
        for job in sorted(content['jobs'], key=lambda j: j['name']):
            print " ".join(trunc(str(val), size).ljust(size) for val, (_, size) in zip((job['name'], job['status'], job['scheduler'], job['last_success']), JOB_COLUMNS))

def print_job_runs(options, runs):
    print " ".join(title.ljust(size) for title, size in RUN_COLUMNS[:4])

    for run in runs[:options.num_shown]:
        run_id = '.'.join([''] + run['id'].split('.')[1:])
        run_state = run['state']

        run_time = (run['run_time'] and run['run_time'][:-7]) or "-"
        start_time = (run['start_time'] and run['start_time'][:-7]) or "-"
        end_time = (run['end_time'] and run['end_time'][:-7]) or "-"
        duration = (run['duration'] and run['duration'][:-7]) or "-"

        print " ".join(trunc(str(val), size).ljust(size) for val, (_, size) in zip((run_id, run_state, run['node'], run_time), RUN_COLUMNS[:4]))
        print "%s Start: %s  End: %s  (%s)" % (' ' * RUN_COLUMNS[0][1], start_time, end_time, duration)
        #print " ".join(trunc(str(val), size).ljust(size) for val, (_, size) in zip((run_id, run_state, run['node'], run_time, start_time, end_time, duration), RUN_COLUMNS[4:]))
        print

def view_job(options, job_name):
    """Retrieve details of the specified job and display"""
    status, job_content = cmd.request(options.server, "/jobs/%s" % job_name)
    if status == cmd.ERROR:
        print >>sys.stderr, "%s: Cannot find job %s" % (job_content, job_name)
        sys.exit(1)

    print job_content['name'] + ":"
    print "Scheduler: %s\n" % job_content['scheduler']
    
    print "List of Actions (topological):"
    print "\n".join(job_content['action_names'])
    print 
    print "Node Pool:"
    print "\n".join(job_content['node_pool'])
    print

    print "Run History: (%d total)" % len(job_content['runs'])
    print_job_runs(options, job_content['runs'])

    if not options.num_shown:
        options.num_shown = len(job_content['runs'])

def view_job_run(options, job_run_id):
    status, job_run_content = cmd.request(options.server, "/jobs/%s" % job_run_id.replace('.', '/'))
    if status == cmd.ERROR:
        print >>sys.stderr, "%s: Cannot find job run %s" % (job_run_content, job_run_id)
        sys.exit(1)
   
    print "Job Run: %s" % job_run_content['id']
    print "State: %s" % job_run_content['state']
    print "Node: %s" % job_run_content['node']
    print
    print " ".join(title.ljust(size) for title, size in ACTION_RUN_COLUMNS)
    
    for run in job_run_content['runs']:
        run_id = '.'.join([''] + run['id'].split('.')[2:])
        run_state = run['state']

        #run_time = (run['run_time'] and run['run_time'][:-7]) or "-"
        start_time = (run['start_time'] and run['start_time'][:-7]) or "-"
        end_time = (run['end_time'] and run['end_time'][:-7]) or "-"
        duration = (run['duration'] and run['duration'][:-7]) or "-"

        print " ".join(trunc(str(val), size).ljust(size) for val, (_, size) in zip((run_id, run_state, start_time, end_time, duration), ACTION_RUN_COLUMNS))

def view_action_run(options, act_run_id):
    url = "/jobs/%s?num_lines=%s" % (act_run_id.replace('.', '/'), options.num_shown)
    status, act_run_content = cmd.request(options.server, url)

    if status == cmd.ERROR:
        print >>sys.stderr, "%s: Cannot find action run %s" % (act_run_content, act_run_id)
        sys.exit(1)

    if options.stdout:
        print "".join(act_run_content['stdout'])   
        return
    
    if options.stderr:
        print "".join(act_run_content['stderr'])
        return

    print "Action Run: %s" % act_run_content['id']
    print "State: %s" % act_run_content['state']
    print "Node: %s" % act_run_content['node']
    print
    print "Requirements:"
    for req in act_run_content['requirements']:
        print req
    print
    print "stdout:"
    print "".join(act_run_content['stdout'])
    print "stderr:"
    print "".join(act_run_content['stderr'])

def main():
    """run tronview"""
    options, args = parse_options()
    cmd.setup_logging(options)
    
    cmd.load_config(options)
    status, content = cmd.request(options.server, "/status")
    
    if status != cmd.OK or not content:
        print >>sys.stderr, "Error connecting to tron server at %s" % options.server
        sys.exit(1)

    if not args:
        view_all(options, )
    else:
        level = args[0].count('.')
        if level == 0:
            view_job(options, args[0])
        elif level == 1:
            view_job_run(options, args[0])
        else:
            view_action_run(options, args[0])

    cmd.save_config(options)

if __name__ == '__main__':
    main()

