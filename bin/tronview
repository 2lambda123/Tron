#!/usr/bin/env python
import os
import optparse
import sys

import tron
from tron import cmd
from tron.commands import display
from tron.commands.client import Client


def parse_options():
    parser = optparse.OptionParser(
        "usage: %prog [options] [<job | job run | action>]",
        version="%%prog %s" % tron.__version__)
    parser.add_option("--verbose", "-v", action="count", dest="verbose",
                      help="Verbose logging", default=0)
    parser.add_option("--numshown", "-n", type="int", dest="num_displays",
                      help="Max number of jobs/job-runs shown", default=10)
    parser.add_option("--server", action="store", dest="server",
                      help="Server URL to connect to", default=None)
    parser.add_option("--hide-preface", "-z", action="store_false",
                      dest="display_preface", help="Don't display preface",
                      default=True)
    parser.add_option("--color", "-c", action="store_true",
                      dest="display_color", help="Display in color",
                      default=False)
    parser.add_option("--stdout", "-o", action="count", dest="stdout",
                      help="Solely displays stdout", default=0)
    parser.add_option("--stderr", "-e", action="count", dest="stderr",
                      help="Solely displays stderr", default=0)
    parser.add_option("--warn", "-w", action="count", dest="warn",
                      help="Solely displays warnings and errors", default=0)
    parser.add_option("--events", action="store_true", dest="show_events",
                      help="Show events for the specified entity",
                      default=False)

    (options, args) = parser.parse_args(sys.argv)
    display.Color.enabled = options.display_color

    return options, args[1:]


def console_width():
    return int(os.popen('stty size', 'r').read().split()[1])

def console_height():
    return int(os.popen('stty size', 'r').read().split()[0])

def display_events(response):
    return "\n".join(
        "\t".join((evt['time'], evt['level'], evt['entity'], evt['name']))
        for evt in response['data']
    )

def view_all(options, client, width):
    """Retreive jobs and services and display them."""
    if options.show_events:
        print display_events(client.events())
        return

    print display.DisplayServices(width).format(client.services())

    jobs = client.jobs()
    # load job details for each job
    if options.warn:
        for job in jobs:
            job['details'] = client.job(job['name'])
        
    print display.DisplayJobs(width, options).format(jobs)


def view_job(options, job_name, client, width):
    """Retrieve details of the specified job and display"""
    if options.show_events:
        print display_events(client.job_events(job_name))
        return

    job_content = client.job(job_name)
    print display.DisplayJobs(width, options).format_job(job_content)


def view_job_run(options, job_run_id, client, width):
    if options.show_events:
        print display_events(client.action_events(job_run_id))
        return

    actions = client.actions(job_run_id)
    # TODO: Where to
    if options.display_preface:
        print "Job Run: %s" % actions['id']
        print "State: %s" % actions['state']
        print "Node: %s" % actions['node']
        print
    display_action = display.DisplayActions(width, options)
    print display_action.format_action_run(actions['runs'])


def view_action_run(options, act_run_id, client, width):
    display_action = display.DisplayActions(width, options)
    print display_action.format_action_run(client.action(act_run_id))


def view_service(options, service_name, client, width):
    """Retrieve details of the specified job and display"""
    if options.show_events:
        print display_events(client.service_events(service_name))
        return

    service_content = client.service(service_name)
    print "Service: %s" % service_content['name']
    print "State: %s" % service_content['state']
    print "Instances: %r" % service_content['count']
    for service_instance in service_content['instances']:
        print "  %s : %s %s" % (service_instance['id'],
                                service_instance['node'],
                                service_instance['state'])


def main():
    """run tronview"""
    options, args = parse_options()
    cmd.setup_logging(options)
    cmd.load_config(options)

    width = console_width()
    client = Client(options)
    client.status()

    if not args:
        view_all(options, width, client)
        cmd.save_config(options)
        return

    content = client.index()
    job_to_uri = cmd.make_job_to_uri(content)
    service_to_uri = cmd.make_service_to_uri(content)

    level = args[0].count('.')
    object_name = args[0].split('.')[0]

    if object_name in job_to_uri:
        if level == 0:
            view_job(options, args[0], client, width)
        elif level == 1:
            view_job_run(options, args[0], client, width)
        else:
            view_action_run(options, args[0], client, width)
    elif object_name in service_to_uri:
        if level == 0:
            view_service(options, args[0], client, width)
        else:
            print >>sys.stderr, "Too many .'s for a service"
            sys.exit(1)
    else:
        print >>sys.stderr, "What is a %s?" % args[0]
        sys.exit(1)

    cmd.save_config(options)

if __name__ == '__main__':
    try:
        main()
    except Exception, e :
        print >>sys.stderr, e
