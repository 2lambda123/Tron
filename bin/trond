#!/usr/bin/env python
""" Start the Tron server daemon."""

import logging
import logging.config
import optparse
import os
import pkg_resources
import sys

from twisted.internet import defer
from twisted.python import log

import tron
from tron import commands
from tron import trondaemon


TRON                        = 'tron'
DEFAULT_CONF                = 'default_config.yaml'
DEFAULT_WORKING_CONF        = 'tron_config.yaml'
DEFAULT_LOGGING_CONF        = 'logging.conf'
DEFAULT_WORKING_DIR         = '/var/lib/tron/'
DEFAULT_PIDFILE             =  'tron.pid'
DEFAULT_PIDPATH             = '/var/run/' + DEFAULT_PIDFILE


def parse_options():
    parser = optparse.OptionParser(version="%%prog %s" % tron.__version__)

    parser.add_option("--working-dir", default=DEFAULT_WORKING_DIR,
            help="Working directory for the Tron daemon, default %default")

    parser.add_option("-c", "--config-file",
            help="File path to the Tron configuration file")

    parser.add_option("--nodaemon", action="store_true", default=False,
            help="Disable daemonizing, default %default")

    parser.add_option("--pid-file",
            help="File path to PID file, defaults to %s if working directory "
                 "is default. Otherwise defaults to <working dir>/%s" %
                 (DEFAULT_PIDPATH, DEFAULT_PIDFILE))

    logging_group = optparse.OptionGroup(parser, "Logging")
    logging_group.add_option("--log-conf", "-l",
            help="File path to a custom logging.conf")

    logging_group.add_option("-v", "--verbose", action="count", default=0,
            help="Verbose logging. Repeat for more verbosity.")

    logging_group.add_option("--debug", action="store_true",
            help="Debug mode, extra error reporting, no daemonizing")
    parser.add_option_group(logging_group)

    api_group = optparse.OptionGroup(parser, "Web Service API")
    api_group.add_option("--port", "-P", dest="listen_port", type=int,
            help="TCP port number to listen on, default %default",
            default=commands.DEFAULT_PORT)

    api_group.add_option("--host", "-H", dest="listen_host",
            help="Hostname to listen on, default %default",
            default=commands.DEFAULT_HOST)
    parser.add_option_group(api_group)

    (options, args) = parser.parse_args(sys.argv)

    if options.log_conf and not os.path.exists(options.log_conf):
        parser.error("Logging config file not found: %s" % options.log_conf)

    if options.working_dir != DEFAULT_WORKING_DIR and not options.pid_file:
        options.pid_file = os.path.join(options.working_dir, DEFAULT_PIDFILE)

    if not options.pid_file:
        options.pid_file = DEFAULT_PIDPATH

    if options.config_file is None:
        options.config_file = os.path.join(
                options.working_dir, DEFAULT_WORKING_CONF)

    if options.debug:
        options.nodaemon = True

    return options


def create_default_config(config_path):
    """Create a default empty configuration for first time installs"""
    default = pkg_resources.resource_string(TRON, DEFAULT_CONF)
    with open(config_path, "w") as config_file:
        config_file.write(default)


def setup_environment(options):
    """Setup the working directory and config environment."""
    if not os.path.exists(options.working_dir):
        os.makedirs(options.working_dir)

    if (not os.path.isdir(options.working_dir) or
        not os.access(options.working_dir, os.R_OK | os.W_OK | os.X_OK)):
        msg = "Error, can't access working directory %s." % (options.working_dir)
        raise SystemExit(msg)

    # Attempt to create a default config if config is missing
    if not os.path.exists(options.config_file):
        try:
            create_default_config(options.config_file)
        except OSError, e:
            msg = "Error creating default configuration at %s: %s"
            raise SystemExit(msg % (options.config_file, e))

    if not os.access(options.config_file, os.R_OK | os.W_OK):
        msg = "Error opening configuration %s: Missing Permissions"
        raise SystemExit(msg % options.config_file)


def setup_logging(options):
    default = pkg_resources.resource_filename(TRON, DEFAULT_LOGGING_CONF)
    logfile = options.log_conf or default

    level = twist_level = None
    if options.verbose > 0:
        level = logging.INFO
        twist_level = logging.WARNING
    if options.verbose > 1:
        level = logging.DEBUG
        twist_level = logging.INFO
    if options.verbose > 2:
        twist_level = logging.DEBUG

    tron_logger = logging.getLogger('tron')
    twisted_logger = logging.getLogger('twisted')

    logging.config.fileConfig(logfile)
    if level is not None:
        tron_logger.setLevel(level)
    if twist_level is not None:
        twisted_logger.setLevel(twist_level)

    # Hookup twisted to standard logging
    log.PythonLoggingObserver().start()

    # Show stack traces for errors in twisted deferreds.
    if options.debug:
        defer.setDebugging(True)


def main():
    options = parse_options()

    setup_environment(options)
    setup_logging(options)
    trond = trondaemon.TronDaemon(options)
    trond.run()

if __name__ == '__main__':
    main()
