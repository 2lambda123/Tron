#!/usr/bin/env python
import yaml
import logging
import sys
import datetime
import optparse
import os
import gc

from twisted.python import log
from twisted.internet import reactor, defer
from twisted.web import server

from tron import mcp, job, resource, node, scheduler, config, www, monitor, emailer

def parse_options():
    parser = optparse.OptionParser()
    
    parser.add_option("--config-file", "-c", action="store", dest="config_file", help="(require) Configuration file to load", default=None)
    parser.add_option("--working-dir", action="store", dest="working_dir", help="Directory where tron's state and output is stored", default=None)
    parser.add_option("--verbose", "-v", action="count", dest="verbose", help="Verbose logging", default=0)
    parser.add_option("--debug", action="store_true", dest="debug", help="Debug mode, extra error reporting")
    parser.add_option("--log-file", "-l", action="store", dest="log_file", help="Where the logs are stored", default=None)
    
    (options, args) = parser.parse_args(sys.argv)
    if options.config_file is None:
        parser.error("Configuration file must be specified with --config-file option")
    
    if options.working_dir and not os.path.isdir(options.working_dir):
        parser.error("State directory is not valid.")
    
    return options

def setup_logging(options):
    level = logging.WARNING
    stream = sys.stderr
    if options.verbose > 0:
        stream = sys.stdout
        level = logging.INFO
    if options.verbose > 1:
        level = logging.DEBUG

    try:
        logging.basicConfig(level=level,
                            format='%(asctime)s %(name)s %(levelname)s %(message)s',
                            stream=stream, 
                            filename=options.log_file)
    except IOError, e:
        print >>sys.stderr, e
        sys.exit()

    # Hookup twisted to standard logging
    observer = log.PythonLoggingObserver()
    observer.start()

    # Show stack traces for errors in twisted deferreds.
    if options.debug:
        defer.setDebugging(True)

def main():
    gc.enable()
    options = parse_options()
    
    setup_logging(options)
    
    # Configure the mcp
    master_control = mcp.MasterControlProgram(options.working_dir)
    
    config_file = open(options.config_file, "r")

    try:
        configuration = config.load_config(config_file)
        configuration.apply(master_control)
    except yaml.YAMLError, e:
        print >>sys.stderr, "Error in configuration file:", e
        sys.exit()
   
    working_dir = master_control.state_handler.working_dir
    if not os.path.isdir(working_dir):
        sys.exit("Specified working directory \'%s\' is not a directory" % working_dir)
    if not os.access(working_dir, os.W_OK):
        sys.exit("Specified working directory \'%s\' is not writable" % working_dir)

    # Setup the mcp polling
    reactor.callLater(1, master_control.run_jobs)
    
    # Start up our web management interface
    reactor.listenTCP(8082, server.Site(www.RootResource(master_control)))
    
    # and then off to reactor land...
    reactor.run()

if __name__ == '__main__':
    main()
