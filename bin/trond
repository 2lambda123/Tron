#!/usr/bin/env python
import logging
import sys
import datetime
import optparse
import os
import gc

from twisted.python import log
from twisted.internet import reactor, defer
from twisted.web import server

from tron import mcp, job, resource, node, scheduler, www, monitor, emailer, config

def parse_options():
    parser = optparse.OptionParser()
    
    parser.add_option("--config-file", "-c", action="store", dest="config_file", help="(require) Configuration file to load (default %default)", default="/etc/tron/tron.yaml")
    parser.add_option("--working-dir", action="store", dest="working_dir", help="Directory where tron's state and output is stored", default=None)
    parser.add_option("--verbose", "-v", action="count", dest="verbose", help="Verbose logging", default=0)
    parser.add_option("--debug", action="store_true", dest="debug", help="Debug mode, extra error reporting")
    parser.add_option("--log-file", "-l", action="store", dest="log_file", help="Where the logs are stored (default %default)", default="/var/log/tron.log")
    parser.add_option("--port", "-P", action="store", dest="listen_port", help="What port to listen on, defaults %default", default=8082, type=int)
    parser.add_option("--host", "-H", action="store", dest="listen_host", help="What host to listen on defaults to %default", default="localhost", type=str)
    
    (options, args) = parser.parse_args(sys.argv)
    if options.config_file is None:
        parser.error("Configuration file must be specified with --config-file option")
    
    if options.working_dir and not os.path.isdir(options.working_dir):
        parser.error("State directory is not valid.")
    
    return options

def setup_logging(options):
    level = logging.WARNING
    stream = sys.stderr
    if options.verbose > 0:
        stream = sys.stdout
        level = logging.INFO
    if options.verbose > 1:
        level = logging.DEBUG

    try:
        logging.basicConfig(level=level,
                            format='%(asctime)s %(name)s %(levelname)s %(message)s',
                            stream=stream, 
                            filename=options.log_file)
    except IOError, e:
        print >>sys.stderr, e
        sys.exit()

    # Hookup twisted to standard logging
    observer = log.PythonLoggingObserver()
    observer.start()

    # Show stack traces for errors in twisted deferreds.
    if options.debug:
        defer.setDebugging(True)

def main():
    options = parse_options()
    
    setup_logging(options)
    
    # Configure the mcp
    master_control = mcp.MasterControlProgram(options.working_dir, options.config_file)
    try:
        master_control.load_config()
    except config.ConfigError, e:
        print >>sys.stderr, "Error in configuration file:", e
        sys.exit()

    # Start up our web management interface
    reactor.listenTCP(options.listen_port, server.Site(www.RootResource(master_control)), interface=options.listen_host)

    # Setup the mcp timed callbacks
    master_control.try_restore()
    reactor.callLater(0, master_control.run_jobs)
    
    # and then off to reactor land...
    reactor.run()

if __name__ == '__main__':
    main()
