#!/usr/bin/env python
import logging
import sys
import datetime
import optparse
import os

from twisted.python import log
from twisted.internet import reactor, defer
from twisted.web import server

from tron import mcp, job, resource, node, scheduler, config, www, monitor, emailer

def parse_options():
    parser = optparse.OptionParser()
    
    parser.add_option("--config-file", "-c", action="store", dest="config_file", help="(require) Configuration file to load", default=None)
    parser.add_option("--state_dir", action="store", dest="state_dir", help="Directory where tron's state is backed up", default=None)
    parser.add_option("--verbose", "-v", action="count", dest="verbose", help="Verbose logging", default=0)
    parser.add_option("--debug", action="store_true", dest="debug", help="Debug mode, extra error reporting")
    
    (options, args) = parser.parse_args(sys.argv)
    if options.config_file is None:
        parser.error("Configuration file must be specified with --config-file option")
    
    if options.state_dir and not os.path.isdir(options.state_dir):
        parser.error("State directory is not valid.")
    
    return options

def setup_logging(options):
    level = logging.WARNING
    stream = sys.stderr
    if options.verbose > 0:
        stream = sys.stdout
        level = logging.INFO
    if options.verbose > 1:
        level = logging.DEBUG
    
    logging.basicConfig(level=level,
                        format='%(asctime)s %(name)s %(levelname)s %(message)s',
                        stream=stream,)

    # Hookup twisted to standard logging
    observer = log.PythonLoggingObserver()
    observer.start()

    # Show stack traces for errors in twisted deferreds.
    if options.debug:
        defer.setDebugging(True)

def main():
    options = parse_options()
    
    setup_logging(options)
    
    # Configure the mcp
    master_control = mcp.MasterControlProgram(options.state_dir)
    
    config_file = open(options.config_file, "r")
    configuration = config.load_config(config_file)
    configuration.apply(master_control)
    
    state_dir = master_control.state_handler.state_dir
    if not os.path.isdir(state_dir):
        sys.exit("Specified state directory \'%s\' is not a directory" % state_dir)
    if not os.access(state_dir, os.W_OK):
        sys.exit("Specified state directory \'%s\' is not writable" % state_dir)

    # Setup the mcp polling
    reactor.callLater(1, master_control.run_jobs)
    
    # Start up our web management interface
    reactor.listenTCP(8082, server.Site(www.RootResource(master_control)))
    
    # and then off to reactor land...
    reactor.run()

if __name__ == '__main__':
    main()
