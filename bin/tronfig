#!/usr/bin/env python
from __future__ import with_statement
import logging
import os
import tempfile
import sys

from tron.commands import cmd_utils
from tron.commands.client import Client
from tron.config import config_parse
from tron.config import schema, manager, ConfigError


log = logging.getLogger('tronfig')


def set_options_from_args(options, args):
    if args and args[-1] == '-':
        options.from_stdin = True
        args = args[:-1]
    else:
        options.from_stdin = False

    options.config_name = args[0] if args else schema.MASTER_NAMESPACE


def parse_options():
    usage  = "usage: %prog [<name>] [options] [-]"
    parser = cmd_utils.build_option_parser(usage)

    parser.add_option("-p", "--print", action="store_true", dest="print_config",
                      help="Print config to stdout, rather than uploading")
    parser.add_option("-n", "--no-header", action="store_true", default=False,
                      help="Print named config without a header")
    parser.add_option("-C", "--check", action="store_true", dest="check",
                      help="Only check configuration, don't apply")
    parser.add_option("-d", "--delete", action="store_true",
                      help="Delete the configuration for this namespace")

    options, args = parser.parse_args()
    set_options_from_args(options, args)
    return options


def upload_config(client, config_name, contents, config_hash, check=False):
    response = client.config(
        config_name,
        config_data=contents,
        config_hash=config_hash,
        check=check
    )

    if 'error' in response:
        log.error(response['error'])
        return False

    print >>sys.stderr, "Configuration uploaded successfully"
    return True


def edit_config(contents):
    fi = tempfile.NamedTemporaryFile(suffix='.yaml')
    fi.write(contents)
    fi.flush()

    editor = os.getenv('EDITOR') or os.getenv('VISUAL') or 'vim'
    while os.system("%s %s" % (editor, fi.name)):
        response = raw_input(
            "Editor returned an error. Continue editing? (y/n): ")
        if response[:1].lower() == 'n':
            return

    with open(fi.name) as upload_file:
        return upload_file.read()


def validate(config_name, config_content):
    try:
        config_data = manager.from_string(config_content)
        config_parse.validate_fragment(config_name, config_data)
        return True
    except ConfigError, e:
        log.error(e)


def print_config(client, config_name, no_header):
    print client.config(config_name, no_header=no_header)['config']


def delete_config(client, config_name):
    if config_name == schema.MASTER_NAMESPACE:
        log.error("Deleting MASTER namespace is not allowed. Name must be specified.")
        return

    response = raw_input(
        "This will delete the configuration for the %s namespace. Proceed? (y/n): " % config_name)
    if response[:1].lower() != 'y':
        return

    config_hash = client.config(config_name)['hash']
    if upload_config(client, config_name, "", config_hash):
        return
    raise SystemExit("tronfig deletion failed")


def update_from_stdin(client, config_name, check=False):
    config_content = sys.stdin.read()
    config_hash = client.config(config_name)['hash']
    if validate(config_name, config_content):
        if upload_config(
                client, config_name, config_content, config_hash, check=check):
            return
    raise SystemExit("tronfig failed")


def update_with_editor(client, config_name):
    if not sys.stdout.isatty():
        raise SystemExit("No editing possible.")

    response        = client.config(config_name)
    config_content  = response['config']
    config_hash     = response['hash']
    while True:
        config_content = edit_config(config_content)
        if not config_content:
            log.warn("Cancelling edit.")
            return

        if validate(config_name, config_content):
            if upload_config(client, config_name, config_content, config_hash):
                return

        response = raw_input(
            "There are errors in your configuration. Continue editing? (y/n): ")
        if response[:1].lower() == 'n':
            return


if __name__ == '__main__':
    options = parse_options()
    cmd_utils.setup_logging(options)
    cmd_utils.load_config(options)
    client = Client(options.server)
    config_name = options.config_name

    if options.print_config:
        print_config(client, config_name, options.no_header)
    elif options.delete:
        delete_config(client, config_name)
    elif options.from_stdin:
        update_from_stdin(client, config_name, check=options.check)
    else:
        update_with_editor(client, config_name)
