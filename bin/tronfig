#!/usr/bin/env python
import os
import tempfile
import optparse
import sys
import yaml
import tempfile
import shutil

import tron
from tron import mcp, cmd, config

def parse_options():
    parser = optparse.OptionParser("usage: %prog [options] [-]", version="%%prog %s" % tron.__version__)
    parser.add_option("--verbose", "-v", action="count", dest="verbose", help="Verbose logging", default=0)
    parser.add_option("--server", action="store", dest="server", help="Server URL to connect to", default=None)
    (options, args) = parser.parse_args(sys.argv)

    options.from_stdin = False
    if args[-1] == "-":
        options.from_stdin = True

    return options

def upload_config(options, contents):
    status, content = cmd.request(options.server, "/config", {'config': contents})
    if 'error' in content:
        print >>sys.stderr, "Configuration uploaded but errors occurred. Please fix: %s" % content['error']
        sys.exit(1)
    else:
        print "Configuration uploaded successfully"

def clean_config(load):
    if hasattr(load, 'ssh_options'):
        del load.ssh_options

    return load

def test_config(file_name):
    tmpdir = tempfile.mkdtemp()
    
    # Can the MCP handle the configuration?
    try:
        # The local MCP can't handle all the configuration, so clean it
        edited_config = clean_config(yaml.load(file(file_name)))
        edited_file = tempfile.NamedTemporaryFile()
        edited_file.write(yaml.dump(edited_config))
        edited_file.flush()

        master = mcp.MasterControlProgram(tmpdir, edited_file.name)
        master.load_config()
        return True
    except Exception, e:
        print >>sys.stderr, "Error in configuration: %s" % str(e)
        
    finally:
        shutil.rmtree(tmpdir)

    return False

def edit_config(options, contents):
    fi = tempfile.NamedTemporaryFile(suffix='.yaml')
    fi.write(contents)
    fi.flush()

    editor = os.getenv('EDITOR') or os.getenv('VISUAL') or 'vim'
    while not os.system("%s %s" % (editor, fi.name)) and not test_config(fi.name):
        if raw_input("There are errors in your configuration. Continue editing? (y/n): ")[:1].lower() == 'n':
            return
    
    upload = open(fi.name)
    upload_config(options, upload.read())
    upload.close()
    fi.close()

if __name__ == '__main__':
    options = parse_options()
    cmd.setup_logging(options)

    cmd.load_config(options)

    if options.from_stdin:
        # We're taking config from stdin and uploading it directly
        incoming_config = sys.stdin.read()
        upload_config(options, incoming_config)
    else:
        # We're going to need config from the server
        status, content = cmd.request(options.server, "/config")
        if status != cmd.OK:
            print >>sys.stderr, "Error from server at %s : %r" % (options.server, content)
            sys.exit(1)

        if os.isatty(sys.stdout.fileno()):
            edit_config(options, content['config'])
        else:
            # Just dump it to stdout
            print content['config']
    
    cmd.save_config(options)

